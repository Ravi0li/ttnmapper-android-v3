/**
* The Things Stack for LoRaWAN v3 API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: version not set
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.TxSettingsDownlink
import org.openapitools.client.models.V3DataRate
import org.openapitools.client.models.V3DataRateIndex

import com.squareup.moshi.Json

/**
 * TxSettings contains the settings for a transmission. This message is used on both uplink and downlink. On downlink, this is a scheduled transmission.
 * @param dataRate 
 * @param dataRateIndex 
 * @param codingRate LoRa coding rate.
 * @param frequency Frequency (Hz).
 * @param enableCrc Send a CRC in the packet; only on uplink; on downlink, CRC should not be enabled.
 * @param timestamp Timestamp of the gateway concentrator when the uplink message was received, or when the downlink message should be transmitted (microseconds). On downlink, set timestamp to 0 and time to null to use immediate scheduling.
 * @param time Time of the gateway when the uplink message was received, or when the downlink message should be transmitted. For downlink, this requires the gateway to have GPS time synchronization.
 * @param downlink 
 */

data class V3TxSettings (
    @Json(name = "data_rate")
    val dataRate: V3DataRate? = null,
    @Json(name = "data_rate_index")
    val dataRateIndex: Int? = null,
    /* LoRa coding rate. */
    @Json(name = "coding_rate")
    val codingRate: kotlin.String? = null,
    /* Frequency (Hz). */
    @Json(name = "frequency")
    val frequency: kotlin.String? = null,
    /* Send a CRC in the packet; only on uplink; on downlink, CRC should not be enabled. */
    @Json(name = "enable_crc")
    val enableCrc: kotlin.Boolean? = null,
    /* Timestamp of the gateway concentrator when the uplink message was received, or when the downlink message should be transmitted (microseconds). On downlink, set timestamp to 0 and time to null to use immediate scheduling. */
    @Json(name = "timestamp")
    val timestamp: kotlin.Long? = null,
    /* Time of the gateway when the uplink message was received, or when the downlink message should be transmitted. For downlink, this requires the gateway to have GPS time synchronization. */
    @Json(name = "time")
    val time: java.time.OffsetDateTime? = null,
    @Json(name = "downlink")
    val downlink: TxSettingsDownlink? = null
)

